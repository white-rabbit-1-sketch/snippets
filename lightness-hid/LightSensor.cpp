#include "LightSensor.h"
#include "HidSensorSpec.h"

static const uint8_t _hidMultiReportDescriptorLightSensor[] PROGMEM  = {
//const unsigned char _hidMultiReportDescriptorLightSensor[] = {
 HID_USAGE_PAGE_SENSOR, // USAGE_PAGE (Sensor)
HID_USAGE_SENSOR_TYPE_LIGHT_AMBIENTLIGHT, // USAGE (AmbientLight)
HID_COLLECTION(HID_APPLICATION), // second TLC, for ALS
HID_REPORT_ID(12),

//feature reports (xmit/receive)
HID_USAGE_PAGE_SENSOR,
HID_USAGE_SENSOR_PROPERTY_REPORTING_STATE,
HID_LOGICAL_MIN_8(0),
HID_LOGICAL_MAX_8(5),
 HID_REPORT_SIZE(8),
 HID_REPORT_COUNT(1),
 HID_COLLECTION(HID_LOGICAL),
HID_USAGE_SENSOR_PROPERTY_REPORTING_STATE_NO_EVENTS,
HID_USAGE_SENSOR_PROPERTY_REPORTING_STATE_ALL_EVENTS,
HID_USAGE_SENSOR_PROPERTY_REPORTING_STATE_THRESHOLD_EVENTS,
HID_USAGE_SENSOR_PROPERTY_REPORTING_STATE_NO_EVENTS_WAKE,
HID_USAGE_SENSOR_PROPERTY_REPORTING_STATE_ALL_EVENTS_WAKE,
HID_USAGE_SENSOR_PROPERTY_REPORTING_STATE_THRESHOLD_EVENTS_WAKE,
 HID_FEATURE(HID_DATA_ARR_ABS),
 HID_END_COLLECTION,
HID_USAGE_SENSOR_PROPERTY_SENSOR_STATUS,
HID_LOGICAL_MIN_8(0),
HID_LOGICAL_MAX_32(0xFF,0xFF,0xFF,0xFF),
 HID_REPORT_SIZE(32),
 HID_REPORT_COUNT(1),
 HID_FEATURE(HID_DATA_VAR_ABS), // up to VT_UI4 worth of status info
HID_USAGE_SENSOR_PROPERTY_REPORT_INTERVAL,
HID_LOGICAL_MIN_8(0),
HID_LOGICAL_MAX_32(0xFF,0xFF,0xFF,0xFF),
HID_REPORT_SIZE(32),
HID_REPORT_COUNT(1),
// HID_USAGE_SENSOR_UNITS_MILLISECOND,
HID_UNIT_EXPONENT(0),
HID_FEATURE(HID_DATA_VAR_ABS),
HID_USAGE_SENSOR_PROPERTY_SENSOR_CONNECTION_TYPE, // NAry
HID_LOGICAL_MIN_8(0),
HID_LOGICAL_MAX_8(2),
HID_REPORT_SIZE(8),
HID_REPORT_COUNT(1),
HID_COLLECTION(HID_LOGICAL),
HID_USAGE_SENSOR_PROPERTY_CONNECTION_TYPE_PC_INTEGRATED,
HID_USAGE_SENSOR_PROPERTY_CONNECTION_TYPE_PC_ATTACHED,
HID_USAGE_SENSOR_PROPERTY_CONNECTION_TYPE_PC_EXTERNAL,
HID_FEATURE(HID_CONST_ARR_ABS),
HID_END_COLLECTION,
HID_USAGE_SENSOR_PROPERTY_CHANGE_SENSITIVITY_REL_PCT,
HID_LOGICAL_MIN_8(0),
HID_LOGICAL_MAX_16(0x10,0x27), // 10000 = 0.00 to 100.00 percent with 2 digits past decimal point
HID_REPORT_SIZE(16),
HID_REPORT_COUNT(1),
// HID_USAGE_SENSOR_UNITS_PERCENT,
HID_UNIT_EXPONENT(0x0E), // scale unit to provide 2 digits past the decimal point



HID_FEATURE(HID_DATA_VAR_ABS),
HID_USAGE_SENSOR_DATA(HID_USAGE_SENSOR_DATA_LIGHT_ILLUMINANCE,HID_USAGE_SENSOR_DATA_MOD_MAX),
HID_LOGICAL_MIN_8(0),
HID_LOGICAL_MAX_16(0xFF,0xFF),
HID_REPORT_SIZE(16),
HID_REPORT_COUNT(1),
HID_USAGE_SENSOR_UNITS_LUX,
HID_UNIT_EXPONENT(0x0F), // scale unit to provide 1 digit past the decimal point
HID_FEATURE(HID_DATA_VAR_ABS),
HID_USAGE_SENSOR_DATA(HID_USAGE_SENSOR_DATA_LIGHT_ILLUMINANCE,HID_USAGE_SENSOR_DATA_MOD_MIN),
HID_LOGICAL_MIN_8(0),
HID_LOGICAL_MAX_16(0xFF,0xFF),
HID_REPORT_SIZE(16),
HID_REPORT_COUNT(1),
HID_USAGE_SENSOR_UNITS_LUX,
HID_UNIT_EXPONENT(0x0F), // scale unit to provide 1 digit past the decimal point
HID_FEATURE(HID_DATA_VAR_ABS),

//input reports (transmit)
HID_USAGE_PAGE_SENSOR,
 HID_USAGE_SENSOR_STATE,
HID_LOGICAL_MIN_8(0),
HID_LOGICAL_MAX_8(6),
 HID_REPORT_SIZE(8),
 HID_REPORT_COUNT(1),
HID_COLLECTION(HID_LOGICAL),
 HID_USAGE_SENSOR_STATE_UNKNOWN,
 HID_USAGE_SENSOR_STATE_READY,
 HID_USAGE_SENSOR_STATE_NOT_AVAILABLE,
 HID_USAGE_SENSOR_STATE_NO_DATA,
 HID_USAGE_SENSOR_STATE_INITIALIZING,
 HID_USAGE_SENSOR_STATE_ACCESS_DENIED,
 HID_USAGE_SENSOR_STATE_ERROR,
HID_INPUT(HID_CONST_ARR_ABS),
HID_END_COLLECTION,
 HID_USAGE_SENSOR_EVENT,
HID_LOGICAL_MIN_8(0),
HID_LOGICAL_MAX_8(16),
 HID_REPORT_SIZE(8), 

 HID_REPORT_COUNT(1),
 HID_COLLECTION(HID_LOGICAL),
HID_USAGE_SENSOR_EVENT_UNKNOWN,
HID_USAGE_SENSOR_EVENT_STATE_CHANGED,
HID_USAGE_SENSOR_EVENT_PROPERTY_CHANGED,
HID_USAGE_SENSOR_EVENT_DATA_UPDATED,
HID_USAGE_SENSOR_EVENT_POLL_RESPONSE,
HID_USAGE_SENSOR_EVENT_CHANGE_SENSITIVITY,
HID_USAGE_SENSOR_EVENT_MAX_REACHED,
HID_USAGE_SENSOR_EVENT_MIN_REACHED,
HID_USAGE_SENSOR_EVENT_HIGH_THRESHOLD_CROSS_UPWARD,
HID_USAGE_SENSOR_EVENT_HIGH_THRESHOLD_CROSS_DOWNWARD,
HID_USAGE_SENSOR_EVENT_LOW_THRESHOLD_CROSS_UPWARD,
HID_USAGE_SENSOR_EVENT_LOW_THRESHOLD_CROSS_DOWNWARD,
HID_USAGE_SENSOR_EVENT_ZERO_THRESHOLD_CROSS_UPWARD,
HID_USAGE_SENSOR_EVENT_ZERO_THRESHOLD_CROSS_DOWNWARD,
HID_USAGE_SENSOR_EVENT_PERIOD_EXCEEDED,
HID_USAGE_SENSOR_EVENT_FREQUENCY_EXCEEDED,
HID_USAGE_SENSOR_EVENT_COMPLEX_TRIGGER,
HID_INPUT(HID_CONST_ARR_ABS),
 HID_END_COLLECTION,
HID_USAGE_SENSOR_DATA_LIGHT_ILLUMINANCE,
HID_LOGICAL_MIN_8(0),
HID_LOGICAL_MAX_16(0xFF,0xFF),
HID_USAGE_SENSOR_UNITS_LUX,
HID_UNIT_EXPONENT(0x0F), // scale unit to provide 1 digit past the decimal point
HID_REPORT_SIZE(16),
HID_REPORT_COUNT(1),
HID_INPUT(HID_CONST_VAR_ABS),
HID_USAGE_SENSOR_DATA_LIGHT_COLOR_TEMPERATURE,
HID_LOGICAL_MIN_8(0),
HID_LOGICAL_MAX_16(0xFF,0xFF),
HID_USAGE_SENSOR_UNITS_KELVIN,
HID_UNIT_EXPONENT(0),
HID_REPORT_SIZE(16),
HID_REPORT_COUNT(1),
HID_INPUT(HID_CONST_VAR_ABS),
HID_USAGE_SENSOR_DATA_LIGHT_CHROMATICITY_X,
HID_LOGICAL_MIN_8(0),
HID_LOGICAL_MAX_16(0xFF,0xFF),
HID_USAGE_SENSOR_UNITS_NOT_SPECIFIED,
HID_UNIT_EXPONENT(0x0C), // scale unit to provide 4 digits past the decimal point
HID_REPORT_SIZE(16),
HID_REPORT_COUNT(1),
HID_INPUT(HID_CONST_VAR_ABS),
HID_USAGE_SENSOR_DATA_LIGHT_CHROMATICITY_Y,
HID_LOGICAL_MIN_8(0),
HID_LOGICAL_MAX_16(0xFF,0xFF),
HID_USAGE_SENSOR_UNITS_NOT_SPECIFIED,
HID_UNIT_EXPONENT(0x0C), // scale unit to provide 4 digits past the decimal point
HID_REPORT_SIZE(16),
HID_REPORT_COUNT(1),
HID_INPUT(HID_CONST_VAR_ABS),

HID_END_COLLECTION, // end of ALS TLC 

};



LightSensor_::LightSensor_(void) 
{
	static HIDSubDescriptor node(_hidMultiReportDescriptorLightSensor, sizeof(_hidMultiReportDescriptorLightSensor));
	HID().AppendDescriptor(&node);
}


void LightSensor_::SendReport(void* data, int length)
{
	HID().SendReport(12, data, length);
}

LightSensor_ LightSensor;
